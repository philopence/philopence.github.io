<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Philopence's Blogs</title><link>https://philopence.github.io/posts/</link><description>Recent content in Posts on Philopence's Blogs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Jan 2022 21:43:38 +0800</lastBuildDate><atom:link href="https://philopence.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Design a Keyboard</title><link>https://philopence.github.io/posts/how-to-design-a-keyboard/</link><pubDate>Wed, 05 Jan 2022 21:43:38 +0800</pubDate><guid>https://philopence.github.io/posts/how-to-design-a-keyboard/</guid><description>前言 有一些比较微妙的事，它看起来非常难，但你就是觉得自己似乎能行，便会产生强烈的欲望去实现它。
预想 配列：3x6+6 仿corne布局 旋转编码器 OLED 轴灯+底灯 热插拔轴座 亚克力堆叠的GasKet结构 QMK固件 准备 硬件 焊接套装，键盘配件，烧录工具
软件 kicad，inkscape，freecad
基本流程 创造配列 根据配列生成矩阵 绘制pcb原理图 3D建模 焊接装配 编写和调试固件 资源 编辑配列：http://www.keyboard-layout-editor.com/ 矩阵原理：https://kbfirmware.com/ 开源固件：https://qmk.fm/ 构建模型：http://builder.swillkb.com/
QMK sudo pacman --needed --noconfirm -Sy git python-pip libffi ## pip config set global.index-url https://mirrors.cloud.tencent.com/pypi/simple python3 -m pip install --user qmk ## add &amp;#39;export PATH=&amp;#34;$HOME/.local/bin:$PATH&amp;#34;&amp;#39; to $HOME/.xinitrc git clone git@github.com:philopence/qmk_firmware.git --depth=1 git submodule update --init --depth=1 git remote add upstream &amp;#34;https://github.</description><content>&lt;h2 id="前言">前言&lt;/h2>
&lt;blockquote>
&lt;p>有一些比较微妙的事，它看起来非常难，但你就是觉得自己似乎能行，便会产生强烈的欲望去实现它。&lt;/p>
&lt;/blockquote>
&lt;h2 id="预想">预想&lt;/h2>
&lt;ol>
&lt;li>配列：3x6+6 仿corne布局&lt;/li>
&lt;li>旋转编码器 OLED&lt;/li>
&lt;li>轴灯+底灯&lt;/li>
&lt;li>热插拔轴座&lt;/li>
&lt;li>亚克力堆叠的GasKet结构&lt;/li>
&lt;li>QMK固件&lt;/li>
&lt;/ol>
&lt;h2 id="准备">准备&lt;/h2>
&lt;h3 id="硬件">硬件&lt;/h3>
&lt;p>焊接套装，键盘配件，烧录工具&lt;/p>
&lt;h3 id="软件">软件&lt;/h3>
&lt;p>kicad，inkscape，freecad&lt;/p>
&lt;h2 id="基本流程">基本流程&lt;/h2>
&lt;ol>
&lt;li>创造配列&lt;/li>
&lt;li>根据配列生成矩阵&lt;/li>
&lt;li>绘制pcb原理图&lt;/li>
&lt;li>3D建模&lt;/li>
&lt;li>焊接装配&lt;/li>
&lt;li>编写和调试固件&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源&lt;/h2>
&lt;p>编辑配列：http://www.keyboard-layout-editor.com/
矩阵原理：https://kbfirmware.com/
开源固件：https://qmk.fm/
构建模型：http://builder.swillkb.com/&lt;/p>
&lt;h2 id="qmk">QMK&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo pacman --needed --noconfirm -Sy git python-pip libffi
&lt;span style="color:#75715e">## pip config set global.index-url https://mirrors.cloud.tencent.com/pypi/simple&lt;/span>
python3 -m pip install --user qmk
&lt;span style="color:#75715e">## add &amp;#39;export PATH=&amp;#34;$HOME/.local/bin:$PATH&amp;#34;&amp;#39; to $HOME/.xinitrc&lt;/span>
git clone git@github.com:philopence/qmk_firmware.git --depth&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
git submodule update --init --depth&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
git remote add upstream &lt;span style="color:#e6db74">&amp;#34;https://github.com/qmk/qmk_firmware.git&amp;#34;&lt;/span>
sudo cp /home/arch/qmk_firmware/util/udev/50-qmk.rules /etc/udev/rules.d/
qmk setup &lt;span style="color:#75715e">## for checked&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他">其他&lt;/h2>
&lt;p>客制化键盘线&lt;/p>
&lt;h2 id="log">Log&lt;/h2>
&lt;p>2020-01-05: 产生了做这件事的想法，并从触手可及的地方开始实现。简单学习了kicad和freecad的用法
2020-01-06: 受限于当前设备性能，优先完成软件部分，建模和设计放后面做。遵循始于所立原则；还是得从硬件部分着手，因为固件模板依赖于原理图，且没有硬件无法调试；键盘设计主题为JoStar-Pad，拥有旋钮，热插拔，RGB，OLED等全部功能的pad键盘，旨在练习与熟悉相关设计与编码，小尺寸节约成本。
2020-01-07: 完成了PCB原理图的绘制工作，考虑到成本和焊接问题，可能会将MCU换成开发板做成热插拔的形式，进一步修改原理图。接下来需要学会修改定位板和底板，做成三明治结构
2020-01-08: 从结果出发追根溯源或许会简单一些。&lt;/p></content></item><item><title>Custom Keyboard</title><link>https://philopence.github.io/posts/custom-keyboard/</link><pubDate>Sat, 01 Jan 2022 15:54:24 +0800</pubDate><guid>https://philopence.github.io/posts/custom-keyboard/</guid><description>为什么换键盘？ GK61驱动垃圾 只支持windows系统 按键配置程度很低 USB接口松动 不合理的布局 小指负荷较重而大拇指只方便按空格 键位利用率不高 布局 完全对称的40% 分体键盘
待定
相较于60%布局的优点：
手指负载更均衡，提高大拇指利用率，减轻小指的负担 用按键数量替换按键位置，这点见仁见智 更便携，占用空间更小，节约轴体成本等附送的优点 存在的缺点（随使用更新）：
按键分配 得益于QMK固件，能最大程度的定义适合自己的键位
成对符号保持对称或者放一起，尽量保持常规键位布局，根据功能划分层级</description><content>&lt;h2 id="为什么换键盘">为什么换键盘？&lt;/h2>
&lt;ol>
&lt;li>GK61驱动垃圾 只支持windows系统 按键配置程度很低 USB接口松动&lt;/li>
&lt;li>不合理的布局 小指负荷较重而大拇指只方便按空格 键位利用率不高&lt;/li>
&lt;/ol>
&lt;h2 id="布局">布局&lt;/h2>
&lt;p>完全对称的40% 分体键盘&lt;/p>
&lt;p>&lt;a href="">待定&lt;/a>&lt;/p>
&lt;p>相较于60%布局的优点：&lt;/p>
&lt;ul>
&lt;li>手指负载更均衡，提高大拇指利用率，减轻小指的负担&lt;/li>
&lt;li>用按键数量替换按键位置，这点见仁见智&lt;/li>
&lt;li>更便携，占用空间更小，节约轴体成本等附送的优点&lt;/li>
&lt;/ul>
&lt;p>存在的缺点（随使用更新）：&lt;/p>
&lt;h2 id="按键分配">按键分配&lt;/h2>
&lt;p>得益于QMK固件，能最大程度的定义适合自己的键位&lt;/p>
&lt;p>成对符号保持对称或者放一起，尽量保持常规键位布局，根据功能划分层级&lt;/p></content></item><item><title>Project_Experience</title><link>https://philopence.github.io/posts/project_experience/</link><pubDate>Wed, 29 Dec 2021 11:47:38 +0800</pubDate><guid>https://philopence.github.io/posts/project_experience/</guid><description/><content/></item><item><title>Arch_ins_conf</title><link>https://philopence.github.io/posts/arch_ins_conf/</link><pubDate>Tue, 28 Dec 2021 11:23:54 +0800</pubDate><guid>https://philopence.github.io/posts/arch_ins_conf/</guid><description>01 Pre Ins systemctl stop reflector.service iwctl # station wlan0 connect[-hidden] SSID timedatectl set-ntp true # timedatectl status fdisk -l fdisk /dev/DISK mkfs.fat -F32 /dev/EFI mkfs.ext4 /dev/ROOT mount /dev/ROOT /mnt mkdir /mnt/boot mount /dev/EFI /mnt/boot 02 Ins base pkgs ## https://mirrors.cloud.tencent.com/archlinux/$repo/os/$arch vim /etc/pacman.d/mirrorlist pacstrap /mnt base base-devel linux linux-firmware fish neovim networkmanager grub efibootmgr intel-ucode 03 Conf the system genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab arch-chroot /mnt ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc nvim /etc/locale.</description><content>&lt;h2 id="01-pre-ins">01 Pre Ins&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">systemctl stop reflector.service
iwctl &lt;span style="color:#75715e"># station wlan0 connect[-hidden] SSID&lt;/span>
timedatectl set-ntp true &lt;span style="color:#75715e"># timedatectl status&lt;/span>
fdisk -l
fdisk /dev/DISK
mkfs.fat -F32 /dev/EFI
mkfs.ext4 /dev/ROOT
mount /dev/ROOT /mnt
mkdir /mnt/boot
mount /dev/EFI /mnt/boot
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="02-ins-base-pkgs">02 Ins base pkgs&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e">## https://mirrors.cloud.tencent.com/archlinux/$repo/os/$arch&lt;/span>
vim /etc/pacman.d/mirrorlist
pacstrap /mnt base base-devel linux linux-firmware fish neovim networkmanager grub efibootmgr intel-ucode
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="03-conf-the-system">03 Conf the system&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
arch-chroot /mnt
ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
hwclock --systohc
nvim /etc/locale.gen &lt;span style="color:#75715e"># uncomment en_US.UTF-8 and zh_CN.UTF-8&lt;/span>
locale-gen
nvim /etc/locale.conf &lt;span style="color:#75715e"># add LANG=en_US.UTF-8&lt;/span>
nvim /etc/hostname &lt;span style="color:#75715e"># set hostname&lt;/span>
nvim /etc/hosts
&lt;span style="color:#75715e"># 127.0.0.1 localhost&lt;/span>
&lt;span style="color:#75715e"># ::1 localhost &lt;/span>
&lt;span style="color:#75715e"># 127.0.1.1 linux.localdomain linux&lt;/span>
systemctl enable NetworkManager.service
passwd &lt;span style="color:#75715e"># root password&lt;/span>
useradd -m -G wheel -s /usr/bin/fish username
passwd username &lt;span style="color:#75715e"># user password&lt;/span>
EDITOR&lt;span style="color:#f92672">=&lt;/span>nvim visudo &lt;span style="color:#75715e"># uncomment &amp;#34;%wheel ALL=(ALL) ALL&amp;#34;&lt;/span>
grub-install --target&lt;span style="color:#f92672">=&lt;/span>x86_64-efi --efi-directory&lt;span style="color:#f92672">=&lt;/span>/boot --bootloader-id&lt;span style="color:#f92672">=&lt;/span>GRUB
grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="04-reboot">04 Reboot&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">exit
umount -R /mnt
reboot
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="05-post_ins">05 Post_Ins&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nmcli device wifi connect SSID password PASSWORD &lt;span style="color:#f92672">[&lt;/span>hidden yes&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#75715e"># https://mirrors.cloud.tencent.com/archlinuxcn/$arch&lt;/span>
nvim /etc/pacman.conf &lt;span style="color:#75715e"># enable Colors and multilib, and archlinuxCN mirror&lt;/span>
sudo pacman -Syyu
sudo pacman -Sy archlinuxcn-keyring
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="wm-and-tools">WM and tools&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">xorg xorg-xinit xdg-user-dirs xclip lxsession
xf86-video-intel vulkan-intel
alsa-utils pulseaudio-alsa bluez bluez-utils pulseaudio-bluetooth
noto-fonts noto-fonts-cjk noto-fonts-emoji nerd-fonts-jetbrains-mono
fcitx5-im fcitx5-rime fcitx5-material-theme
lxappearance qt5ct kvantum
capitaine-cursors papirus-icon-theme material-gtk-theme kvantum-material-theme
bspwm sxhkd kitty rofi picom dunst
git openssh npm feh scrot lazygit fzf fd ripgrep ranger highlight tmux hugo udiskie unarchiver flameshot
chromium firefox code v2raya&lt;span style="color:#f92672">(&lt;/span>v2ray&lt;span style="color:#f92672">)&lt;/span> pomotroid-bin exa
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="init-conf">init conf&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">~/.xinitrc &lt;span style="color:#75715e"># exec bspwm&lt;/span>
mkdir ~/.config/&lt;span style="color:#f92672">{&lt;/span>bspwm,sxhkd&lt;span style="color:#f92672">}&lt;/span>
cp /usr/share/doc/bspwm/examples/bspwmrc ~/.config/bspwm
cp /usr/share/doc/bspwm/examples/sxhkdrc ~/.config/sxhkd
&lt;span style="color:#75715e"># urxvt -&amp;gt; kitty&lt;/span>
&lt;span style="color:#75715e"># dmenu_run -&amp;gt; &amp;#34;rofi -show run&amp;#34;&lt;/span>
startx
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="06-proxy">06 Proxy&lt;/h2>
&lt;p>Start/Enable v2raya.service deamon. Activite &lt;code>localhost:2017&lt;/code>, import url of subscription&lt;/p>
&lt;h2 id="07-dotfiles">07 Dotfiles&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git clone --bare https://github.com/philopence/dotfiles.git $HOME/.dotfiles
alias dot &lt;span style="color:#e6db74">&amp;#39;/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME&amp;#39;&lt;/span>
dot config --local status.showUntrackedFiles no
dot checkout &lt;span style="color:#75715e"># remove files and dirs of conflict&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="08-custom-keyboard">08 Custom Keyboard&lt;/h2>
&lt;p>Create &lt;code>/etc/udev/hwdb.d/99-custom-keyboard.hwdb&lt;/code> file, add this lines as follow.&lt;/p>
&lt;pre tabindex="0">&lt;code>evdev:input:b0003v*
KEYBOARD_KEY_70039=leftctrl # bind capslock to leftctrl
KEYBOARD_KEY_70035=capslock # bind grave to capslock
KEYBOARD_KEY_700e0=grave # bind leftctrl to grave
&lt;/code>&lt;/pre>&lt;p>And then, run &lt;code>systemd-hwdb update&lt;/code> and &lt;code>udevadm trigger&lt;/code> command.&lt;/p>
&lt;p>Or Install &lt;code>interception-caps2esc&lt;/code> package, then edit &lt;code>/etc/interception/udevmon.d/caps2esc.yaml&lt;/code> file, add this lines as follow:&lt;/p>
&lt;pre tabindex="0">&lt;code>- JOB: intercept -g $DEVNODE | caps2esc -m 2 | uinput -d $DEVNODE
DEVICE:
EVENTS:
EV_KEY: [KEY_CAPSLOCK, KEY_ESC]
&lt;/code>&lt;/pre>&lt;p>Start/Enable udevmon.service deamon.&lt;/p>
&lt;h2 id="09-swapfile">09 Swapfile&lt;/h2>
&lt;p>switch to Root user&lt;/p>
&lt;p>Note: count = 8192(8G)&lt;/p>
&lt;pre tabindex="0">&lt;code>dd if=/dev/zero of=/swapfile bs=1M count=8192 status=progress
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
nvim /etc/fstab
# /swapfile none swap defaults 0 0
&lt;/code>&lt;/pre>&lt;h2 id="10-npm-pkgs">10 Npm pkgs&lt;/h2>
&lt;pre tabindex="0">&lt;code>prettier
live-server
@vue/cli
vscode-langservers-extracted
emmet-ls
vls
typescript
typescript-language-server
&lt;/code>&lt;/pre></content></item><item><title>CSS</title><link>https://philopence.github.io/posts/css/</link><pubDate>Tue, 28 Dec 2021 11:00:22 +0800</pubDate><guid>https://philopence.github.io/posts/css/</guid><description>前言 记录CSS的常用样式、难点以及理解
基础知识 CSS: cascading style sheets 层叠样式表。作为“样式”存在 selector { property: value; ...; /* commnet */ } 通过选择器找到需要的元素，然后为其设置样式 引入方式 内嵌：在style标签中编写 外联：通过link标签的href属性引入，注意rel属性设置为stylesheets表示两者关系为样式表。常用，模块化利于代码复用 行内：写在标签的style属性中，通常通过JS动态设置，优先级仅次于!important。 颜色值: 常用的是rgba()和十六进制 标准流：网页默认的排版方式 CSS推荐书写顺序：布局 盒模型 背景 文本 字体 三大特性 继承：font 和 text 系列的属性会继承。继承的优先级小于浏览器的默认样式 层叠：同一元素的相同属性会覆盖；不同属性会同时生效 优先级：优先级高的生效，如果优先级相同则后被执行的样式生效 元素 伪元素(001) &amp;lt; Class 伪类 属性(010) &amp;lt; Id(100) &amp;lt; 行内 &amp;lt; !important
可以简单概括为：选择器的范围与优先级成反比
Tips: 不推荐使用!important，不便于开发调试，而且会影响JS修改的行内样式，如果必须提高优先级，可以重复选择器，如#id#id {}
选择器 元素选择器 tagname 类选择器 .classname。使用思路：定义 -&amp;gt; 调用 ID选择器 #id。ID通常为JS服务，便于唯一选择某个元素，不可为了样式给元素设置ID 通配符选择器 *。会遍历文档中所有标签，性能较低，一般不用，或用来消除浏览器给标签添加的默认样式 伪元素选择器 ::before ::after 创建一个伪元素 结构伪类选择器 :FOO-child :FOO-of-type。FOO可以是first last nth，为nth时，可以写表达式，n为自然数 伪类选择器 :hover 复合选择器： &amp;gt; , ~ + 属性选择器 [attribute=&amp;quot;value&amp;quot;] 含有正则匹配 Box content + padding + border + margin</description><content>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>记录CSS的常用样式、难点以及理解&lt;/p>
&lt;h2 id="基础知识">基础知识&lt;/h2>
&lt;ul>
&lt;li>CSS: cascading style sheets 层叠样式表。作为“样式”存在&lt;/li>
&lt;li>&lt;code>selector { property: value; ...; /* commnet */ }&lt;/code>&lt;/li>
&lt;li>通过选择器找到需要的元素，然后为其设置样式&lt;/li>
&lt;li>引入方式
&lt;ul>
&lt;li>内嵌：在&lt;code>style&lt;/code>标签中编写&lt;/li>
&lt;li>外联：通过&lt;code>link&lt;/code>标签的&lt;code>href&lt;/code>属性引入，注意&lt;code>rel&lt;/code>属性设置为&lt;code>stylesheets&lt;/code>表示两者关系为样式表。常用，模块化利于代码复用&lt;/li>
&lt;li>行内：写在标签的&lt;code>style&lt;/code>属性中，通常通过JS动态设置，优先级仅次于&lt;code>!important&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>颜色值: 常用的是&lt;code>rgba()&lt;/code>和十六进制&lt;/li>
&lt;li>标准流：网页默认的排版方式&lt;/li>
&lt;li>CSS推荐书写顺序：布局 盒模型 背景 文本 字体&lt;/li>
&lt;/ul>
&lt;h2 id="三大特性">三大特性&lt;/h2>
&lt;ul>
&lt;li>继承：font 和 text 系列的属性会继承。继承的优先级小于浏览器的默认样式&lt;/li>
&lt;li>层叠：同一元素的相同属性会覆盖；不同属性会同时生效&lt;/li>
&lt;li>优先级：优先级高的生效，如果优先级相同则后被执行的样式生效&lt;/li>
&lt;/ul>
&lt;p>元素 伪元素(001) &amp;lt; Class 伪类 属性(010) &amp;lt; Id(100) &amp;lt; 行内 &amp;lt; !important&lt;/p>
&lt;p>可以简单概括为：选择器的范围与优先级成反比&lt;/p>
&lt;p>Tips: 不推荐使用&lt;code>!important&lt;/code>，不便于开发调试，而且会影响JS修改的行内样式，如果必须提高优先级，可以重复选择器，如&lt;code>#id#id {}&lt;/code>&lt;/p>
&lt;h2 id="选择器">选择器&lt;/h2>
&lt;ul>
&lt;li>元素选择器 &lt;code>tagname&lt;/code>&lt;/li>
&lt;li>类选择器 &lt;code>.classname&lt;/code>。使用思路：定义 -&amp;gt; 调用&lt;/li>
&lt;li>ID选择器 &lt;code>#id&lt;/code>。ID通常为JS服务，便于唯一选择某个元素，不可为了样式给元素设置ID&lt;/li>
&lt;li>通配符选择器 &lt;code>*&lt;/code>。会遍历文档中所有标签，性能较低，一般不用，或用来消除浏览器给标签添加的默认样式&lt;/li>
&lt;li>伪元素选择器 &lt;code>::before&lt;/code> &lt;code>::after&lt;/code> 创建一个伪元素&lt;/li>
&lt;li>结构伪类选择器 &lt;code>:FOO-child&lt;/code> &lt;code>:FOO-of-type&lt;/code>。FOO可以是&lt;code>first&lt;/code> &lt;code>last&lt;/code> &lt;code>nth&lt;/code>，为&lt;code>nth&lt;/code>时，可以写表达式，n为自然数&lt;/li>
&lt;li>伪类选择器 &lt;code>:hover&lt;/code>&lt;/li>
&lt;li>复合选择器： &lt;code> &lt;/code> &lt;code>&amp;gt;&lt;/code> &lt;code>,&lt;/code> &lt;code>~&lt;/code> &lt;code>+&lt;/code>&lt;/li>
&lt;li>属性选择器 &lt;code>[attribute=&amp;quot;value&amp;quot;]&lt;/code> 含有正则匹配&lt;/li>
&lt;/ul>
&lt;h2 id="box">Box&lt;/h2>
&lt;p>content + padding + border + margin&lt;/p>
&lt;p>实际占用空间包含这四部分，而可视区域不包含margin&lt;/p>
&lt;ul>
&lt;li>嵌套块级元素，上外边距会塌陷&lt;/li>
&lt;li>相邻块级元素之间的外边距为两者的最大值&lt;/li>
&lt;li>&lt;code>inline&lt;/code>元素垂直方向的内外边距都无效&lt;/li>
&lt;/ul>
&lt;p>块级元素居中：&lt;code>margin: 0 auto;&lt;/code>&lt;/p>
&lt;p>内外边距的值始终遵循“上右下左”的顺序&lt;/p>
&lt;p>上左外边距会移动元素自身，而右下外边距会挤开其他元素&lt;/p>
&lt;p>页面由各种各样的“盒子”组成&lt;/p>
&lt;h2 id="float">Float&lt;/h2>
&lt;p>早期用于图文环绕，现在多用于布局&lt;/p>
&lt;p>浮动流：排列方式和标准流的行内块一样，浮动的元素也都转化为行内块元素的特点&lt;/p>
&lt;p>备注：用&lt;code>inline-block&lt;/code>布局时，HTML代码中标签换行会在页面中生成一个空格间隙，影响布局&lt;/p>
&lt;p>缺点：&lt;/p>
&lt;ol>
&lt;li>浮动的元素为半脱离标准流，不占用标准流的空间，不会撑开父元素，会覆盖“下方”元素，但无法覆盖其中的文本&lt;/li>
&lt;li>无法用&lt;code>text-align: center;&lt;/code>和&lt;code>margin: 0 auto;&lt;/code>居中了&lt;/li>
&lt;/ol>
&lt;p>清除浮动的影响：&lt;/p>
&lt;ol>
&lt;li>直接给父元素设置&lt;code>height&lt;/code>&lt;/li>
&lt;li>利用&lt;code>::after&lt;/code>在父元素最后生成伪元素，应用&lt;code>clear: both;&lt;/code>。&lt;/li>
&lt;li>BFC: &lt;code>overflow: hidden;&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>通常使用以下方式清除浮动的同时，也可以解决嵌套块级元素上外边距塌陷的问题&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">clearfix&lt;/span>::&lt;span style="color:#a6e22e">after&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">clearfix&lt;/span>::&lt;span style="color:#a6e22e">before&lt;/span> {
&lt;span style="color:#66d9ef">content&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">table&lt;/span>;
}
.&lt;span style="color:#a6e22e">clearfix&lt;/span>::&lt;span style="color:#a6e22e">after&lt;/span> {
&lt;span style="color:#66d9ef">clear&lt;/span>: &lt;span style="color:#66d9ef">both&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常用样式分组">常用样式分组&lt;/h2>
&lt;h3 id="1-字体">1. 字体&lt;/h3>
&lt;p>&lt;code>font: style weight size/hight family;&lt;/code> 不可更换顺序，&lt;code>size&lt;/code>和&lt;code>family&lt;/code>不能省略&lt;/p>
&lt;h3 id="2-文本">2. 文本&lt;/h3>
&lt;p>&lt;code>text-indent: 2em;&lt;/code> &lt;code>text-align: center;&lt;/code> &lt;code>text-decoration: none;&lt;/code>&lt;/p>
&lt;h3 id="3-背景">3. 背景&lt;/h3>
&lt;p>&lt;code>background: color image repeat attachment position;&lt;/code>&lt;/p>
&lt;p>无固定顺序，但推荐这样写&lt;/p></content></item><item><title>Build_Blogs_With_Hugo</title><link>https://philopence.github.io/posts/build_blogs_with_hugo/</link><pubDate>Mon, 27 Dec 2021 19:27:20 +0800</pubDate><guid>https://philopence.github.io/posts/build_blogs_with_hugo/</guid><description>Quick Start sudo pacman -Sy hugo # archlinux hugo new site DIRNAME cd DIRNAME git init git submodule add -f https://github.com/panr/hugo-theme-terminal.git themes/terminal # 编辑config.toml文件，添加主题推荐的配置 hugo new posts/my-first-post.md # 创建一篇博客，在/content/posts/目录中 hugo server # 开启服务预览博客，访问：localhost:1313 自动部署 创建.github/workflows/gh-pages.yml文件，添加如下内容： name: github pages on: push: branches: - master # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .</description><content>&lt;h2 id="quick-start">Quick Start&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo pacman -Sy hugo &lt;span style="color:#75715e"># archlinux&lt;/span>
hugo new site DIRNAME
cd DIRNAME
git init
git submodule add -f https://github.com/panr/hugo-theme-terminal.git themes/terminal
&lt;span style="color:#75715e"># 编辑config.toml文件，添加主题推荐的配置&lt;/span>
hugo new posts/my-first-post.md &lt;span style="color:#75715e"># 创建一篇博客，在/content/posts/目录中&lt;/span>
hugo server &lt;span style="color:#75715e"># 开启服务预览博客，访问：localhost:1313&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自动部署">自动部署&lt;/h2>
&lt;ol>
&lt;li>创建&lt;code>.github/workflows/gh-pages.yml&lt;/code>文件，添加如下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">github pages&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">branches&lt;/span>:
- &lt;span style="color:#ae81ff">master &lt;/span> &lt;span style="color:#75715e"># Set a branch to deploy&lt;/span>
&lt;span style="color:#f92672">pull_request&lt;/span>:
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">deploy&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-20.04&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">submodules&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e"># Fetch Hugo themes (true OR recursive)&lt;/span>
&lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e"># Fetch all history for .GitInfo and .Lastmod&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup Hugo&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># extended: true&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v3&lt;/span>
&lt;span style="color:#75715e"># if: github.ref == &amp;#39;refs/heads/main&amp;#39;&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">github_token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;span style="color:#f92672">publish_dir&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>修改Github pages分支为&lt;code>gh-pages&lt;/code>，默认推送的分支名&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将&lt;code>config.toml&lt;/code>的&lt;code>baseURL&lt;/code>选项的值改为&lt;code>https://&amp;lt;USERNAME&amp;gt;.github.io&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>操作流程：创建博客 -&amp;gt; 提交更新 -&amp;gt; 推送到远程仓库&lt;/p>
&lt;h2 id="其他命令">其他命令&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e">## 新环境初始化&lt;/span>
git clone git@github.com:USERNAME/USERNAME.github.io.git --recurse-submodules
&lt;span style="color:#75715e">## 更新子模块&lt;/span>
git submodule update --remote
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>HTML</title><link>https://philopence.github.io/posts/html/</link><pubDate>Mon, 27 Dec 2021 19:08:19 +0800</pubDate><guid>https://philopence.github.io/posts/html/</guid><description>理解 超文本标记语言，作为“结构”存在。其作用为语义化页面内容
默认的呈现样式由浏览器添加，为了保证页面的可读性，不需要理会，实际开发时会进行重置（不带任何样式）
标签和属性都由对应功能的英文单词缩写而来，可做了解，加深理解和记忆
属性是当前标签天生具备的能力
编写页面思路：在确定了页面内容后，为每个部分添加适合的标签。标签之间可以并列和嵌套，形成DOM树
标签嵌套时需要符合语义，如p里放h就不合适，a也不能嵌套a(可以嵌套其他元素)
需要注意的标签及属性 0. 路径问题 相对路径 绝对路径 锚 1. img 只定义宽或高时，另一个属性自适应
2. a 其href属性可以为锚点，也可以是JS代码段。值为#时，跳转到当前页面首屏；为javascript:void(0);时，无任何行为。
3. ul dl ol 定义某种列表，只能嵌套自己的列表项标签
4. table 合并单元格：rowspan, colspan 合并边框：border-collapse 表格标题标签：caption 表格结构化标签：thead tbody tfoot 5. form 自身的属性：
action: 处理当前表单的URL enctype: 加密类型 method: 提交表单的HTTP方法 表单相关的标签有：
input: type的各种值，radio必须name相同生效，file可以添加multiple多选，submit等按钮需要在form中生效 textarea: 常用rows和cols属性限定范围，CSS的resize: none;禁止缩放 select(name)&amp;gt;option(value): 默认选中为selected而非checked，name在select上，value在option上 label: 两种用法：嵌套和for id，后者更灵活，避免嵌套 相关属性：
name value: name作为上传数据的key，value为key对应的值 placeholder: 可以用CSS的::placeholder伪元素定义样式 6. 布局（容器） 无语义容器标签：div span 语义化容器标签：header footer article section aside nav 等等，常用语移动端（兼容性好）</description><content>&lt;h2 id="理解">理解&lt;/h2>
&lt;p>超文本标记语言，作为“结构”存在。其作用为语义化页面内容&lt;/p>
&lt;p>默认的呈现样式由浏览器添加，为了保证页面的可读性，不需要理会，实际开发时会进行重置（不带任何样式）&lt;/p>
&lt;p>标签和属性都由对应功能的英文单词缩写而来，可做了解，加深理解和记忆&lt;/p>
&lt;p>属性是当前标签天生具备的能力&lt;/p>
&lt;p>编写页面思路：在确定了页面内容后，为每个部分添加适合的标签。标签之间可以并列和嵌套，形成DOM树&lt;/p>
&lt;p>标签嵌套时需要符合语义，如&lt;code>p&lt;/code>里放&lt;code>h&lt;/code>就不合适，&lt;code>a&lt;/code>也不能嵌套&lt;code>a&lt;/code>(可以嵌套其他元素)&lt;/p>
&lt;h2 id="需要注意的标签及属性">需要注意的标签及属性&lt;/h2>
&lt;h3 id="0-路径问题">0. 路径问题&lt;/h3>
&lt;ul>
&lt;li>相对路径&lt;/li>
&lt;li>绝对路径&lt;/li>
&lt;li>锚&lt;/li>
&lt;/ul>
&lt;h3 id="1-img">1. img&lt;/h3>
&lt;p>只定义宽或高时，另一个属性自适应&lt;/p>
&lt;h3 id="2-a">2. a&lt;/h3>
&lt;p>其&lt;code>href&lt;/code>属性可以为锚点，也可以是JS代码段。值为&lt;code>#&lt;/code>时，跳转到当前页面首屏；为&lt;code>javascript:void(0);&lt;/code>时，无任何行为。&lt;/p>
&lt;h3 id="3-ul-dl-ol">3. ul dl ol&lt;/h3>
&lt;p>定义某种列表，只能嵌套自己的列表项标签&lt;/p>
&lt;h3 id="4-table">4. table&lt;/h3>
&lt;ul>
&lt;li>合并单元格：&lt;code>rowspan&lt;/code>, &lt;code>colspan&lt;/code>&lt;/li>
&lt;li>合并边框：&lt;code>border-collapse&lt;/code>&lt;/li>
&lt;li>表格标题标签：&lt;code>caption&lt;/code>&lt;/li>
&lt;li>表格结构化标签：&lt;code>thead&lt;/code> &lt;code>tbody&lt;/code> &lt;code>tfoot&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="5-form">5. form&lt;/h3>
&lt;p>自身的属性：&lt;/p>
&lt;ul>
&lt;li>&lt;code>action&lt;/code>: 处理当前表单的URL&lt;/li>
&lt;li>&lt;code>enctype&lt;/code>: 加密类型&lt;/li>
&lt;li>&lt;code>method&lt;/code>: 提交表单的HTTP方法&lt;/li>
&lt;/ul>
&lt;p>表单相关的标签有：&lt;/p>
&lt;ul>
&lt;li>&lt;code>input&lt;/code>: &lt;code>type&lt;/code>的各种值，&lt;code>radio&lt;/code>必须&lt;code>name&lt;/code>相同生效，&lt;code>file&lt;/code>可以添加&lt;code>multiple&lt;/code>多选，&lt;code>submit&lt;/code>等按钮需要在&lt;code>form&lt;/code>中生效&lt;/li>
&lt;li>&lt;code>textarea&lt;/code>: 常用&lt;code>rows&lt;/code>和&lt;code>cols&lt;/code>属性限定范围，CSS的&lt;code>resize: none;&lt;/code>禁止缩放&lt;/li>
&lt;li>&lt;code>select(name)&amp;gt;option(value)&lt;/code>: 默认选中为&lt;code>selected&lt;/code>而非&lt;code>checked&lt;/code>，&lt;code>name&lt;/code>在&lt;code>select&lt;/code>上，&lt;code>value&lt;/code>在&lt;code>option&lt;/code>上&lt;/li>
&lt;li>&lt;code>label&lt;/code>: 两种用法：嵌套和&lt;code>for id&lt;/code>，后者更灵活，避免嵌套&lt;/li>
&lt;/ul>
&lt;p>相关属性：&lt;/p>
&lt;ul>
&lt;li>&lt;code>name&lt;/code> &lt;code>value&lt;/code>: &lt;code>name&lt;/code>作为上传数据的key，&lt;code>value&lt;/code>为key对应的值&lt;/li>
&lt;li>&lt;code>placeholder&lt;/code>: 可以用CSS的&lt;code>::placeholder&lt;/code>伪元素定义样式&lt;/li>
&lt;/ul>
&lt;h3 id="6-布局容器">6. 布局（容器）&lt;/h3>
&lt;p>无语义容器标签：&lt;code>div&lt;/code> &lt;code>span&lt;/code>
语义化容器标签：&lt;code>header&lt;/code> &lt;code>footer&lt;/code> &lt;code>article&lt;/code> &lt;code>section&lt;/code> &lt;code>aside&lt;/code> &lt;code>nav&lt;/code> 等等，常用语移动端（兼容性好）&lt;/p>
&lt;h3 id="7-字符实体">7. 字符实体&lt;/h3>
&lt;p>在页面中直接显示特殊字符，需要转化为字符实体，否则会被浏览器处理或解析。格式为&lt;code>&amp;amp;FOO;&lt;/code>，如空格为&lt;code>&amp;amp;nbsp;&lt;/code>&lt;/p></content></item></channel></rss>